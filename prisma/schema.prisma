generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  clerkId String?
  password  String?
  phone     String?  @unique
  image String?
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId         Int
  car           Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  bookingDate     DateTime
  bookingEndDate     DateTime?
  amount      Decimal  @db.Decimal(10, 2)
  departureLatitude Decimal @db.Decimal(10,2)
  departureLongitude Decimal @db.Decimal(10,2)
  destinationLatitude Decimal? @db.Decimal(10,2)
  destinationLongitude Decimal? @db.Decimal(10,2)
  departure     String
  destination   String?
  paymentStatus        String        @default("PENDING") // "FAILED", "CONFIRMED"
  bookType String
  paymentType String 
  bookingStatus String @default("PENDING") // ("PROCEEDED","CANCELLED","NO SHOW")
  transaction   Transaction[]
  transactionId String?       @unique // Links to Transaction if paid
  addons        BookingAddon[]
  pesapalMappings    PesapalMapping[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?      @updatedAt
  viewed        String         @default("false")
}

model BookingAddon {
  bookingId String
  addonId   Int
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  addon     Addon   @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@id([bookingId, addonId]) // Composite key to prevent duplicate addons in a booking
}

model Transaction {
  id          Int     @id @default(autoincrement())
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String   
  amount      Decimal  @db.Decimal(10, 2)
  confirmationCode String?
  paymentMethod String?
  status      String   @default("PENDING") // PENDING, SUCCESS, FAILED
  reference   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  description String?
  brands      CategoryBrand[]
  cars        Car[]
}

model Brand {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  cars       Car[]
  categories CategoryBrand[]
}

model CategoryBrand {
  categoryId Int
  brandId    Int

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brand      Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@id([categoryId, brandId])
}

model Car {
  id          Int       @id @default(autoincrement())
  name        String
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  description String?
  price       Decimal   @db.Decimal(10, 2)
  imageUrl    String?
  features    Feature[]
  addons      Addon[]
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Feature {
  id           Int    @id @default(autoincrement())
  car          Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId        Int
  featureName  String
  featureValue String

  @@unique([carId, featureName]) // Prevents duplicate features for a car
}


model Addon {
  id          Int             @id @default(autoincrement())
  car         Car             @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       Int
  addonName        String
  addonValue        String
  bookings    BookingAddon[]  // ðŸ”¥ Add this to fix the error

  @@unique([carId, addonName]) // Prevents duplicate addons for a car
}

model PesapalMapping {
  merchant_reference String  @id @map("merchant_reference")
  order_tracking_id   String? @map("order_tracking_id")
  booking_id          String   @map("booking_id")
  booking             Booking  @relation(fields: [booking_id], references: [id])

  @@map("PesapalMapping")
}


